# -----------------------------------------------------------------
#
#   DO NOT EDIT THIS FILE!
#
#   THIS FILE IS MANAGED BY PUPPET,
#   ANY CHANGES WILL BE REVERTED WITHIN THE NEXT PUPPET RUN.
#
#   APPLY YOUR CHANGES TO THE PUPPETMASTER CONFIGURATION INSTEAD.
#   MAKE SURE YOUR CHANGES ARE IN KEEPING WITH DEVLAB STANDARDS.
#
#   DevLab Support, devlab.support@telekom.de
#
# -----------------------------------------------------------------
#
# >>>>>>>>>>>>>>>>> RHEL8 <<<<<<<<<<<<<< 
#              Config : Q4/2021 
# >>>>>>>>>>>>>>>>> RHEL8 <<<<<<<<<<<<<< 
#
#
# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# This is the sshd server system-wide configuration file.
# See sshd_config(5) for more information.
#
# HINT: Test this config file before checking in changes!
#       (to prevent you from locked out ;-)
# sshd -t -f /etc/ssh/sshd_config

# To make this config file more readable 
# grep -v '^#' /etc/ssh/sshd_config | grep -v '^$' 
# grep -v '^#' /etc/ssh/sshd_config | grep -v '^$' | sort -u
# grep -v '^#' /etc/ssh/sshd_config | grep -v '^$' | sort -u | awk '{printf "%-35s %s\n", $1, $2}'
#
# egrep '# PSA|ID:' /etc/ssh/sshd_config 
#
# ... Or check the resulting config with sshd -T -C user=*
#
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# ATTENTION: ORACLE-8 Linux sets the crytpo-stuff at a *different* place 
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# grep '\-o' /etc/crypto-policies/back-ends/opensshserver.config
# or
# head /etc/crypto-policies/back-ends/opensshserver.config
#
# EXAMPLE-Config for Oracle-Linux in this file:
#CRYPTO_POLICY='\
#-oKexAlgorithms=curve25519-sha256@libssh.org,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256 \
#-oGSSAPIKexAlgorithms=gss-gex-sha1-,gss-group14-sha1- \
#-oCiphers=chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr \
#-oMACs=hmac-sha2-256-etm@openssh.com,hmac-sha2-256 \
#-oHostKeyAlgorithms=ssh-ed25519 \
#-oPubkeyAcceptedKeyTypes=ssh-ed25519*,rsa-sha2-512*,ssh-rsa* \
#-oCASignatureAlgorithms=ssh-ed25519,rsa-sha2-512,rsa-sha2-256'
#
# Possible signature algorithms for Keys (more readable above than this list):
#-oPubkeyAcceptedKeyTypes=ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com \
#
##############################################################################
# INFO: ORACLE-Linux (8.1-8.4) comes with OpenSSH_8.0p1, OpenSSL 1.1.1g Apr20 
##############################################################################
# INFO: SLES 15 SP3 comes with: openssh-8.4p1-1.30.x86_64
# Additional switches for YUBI-Key (PubKeyAuthOptions) unused 
# Added switch: gssapikexalgorithms  (default: gss-gex-sha1-,gss-group14-sha1-)
#                               OpenSSH_8.4p1-130
#                                        \
#                                          RELEASE-Change between SP !!! 
#                                        / 
# INFO: SLES 15 SP 1 comes with:OpenSSH_7.9p1, OpenSSL 1.1.0i-fips  14 Aug 2018
#                                         \
#                                          RELEASE-Change between SP !!!
#                                          KexDHMin breaks config! 
#                                         /
# INFO: SLES 15 GA comes with:  openssh-7.6p1, openssl-1_1-1.1.0h
#
# INFO: SLES 15 removes: RC4 / Blowfish/ Cast  
##############################################################################
# Notice KexDHMin deprecated in OpenSSH_7.4p1 / breaks OpenSSH_7.6p1 !
##############################################################################
# INFO: SLES 12 Upgrade: Build 21.1 (openssh-helpers-7.2p2-78.10.1.x86_64)
#                   comes with: OpenSSH_7.2p2, OpenSSL 1.0.2p-fips  14 Aug 2018
#
# INFO: SLES 12 SP5 comes with: OpenSSH_7.2p2, OpenSSL 1.0.2p-fips  14 Aug 2018
# INFO: SLES 12 SP4 comes with: OpenSSH_7.2p2, OpenSSL 1.0.2p-fips  14 Aug 2018 
# INFO: SLES 12 SP3 comes with: OpenSSH_7.2p2, OpenSSL 1.0.2j-fips  26 Sep 2016
# INFO: SLES 12 SP2 comes with: OpenSSH_7.2p2, OpenSSL 1.0.2j-fips  26 Sep 2016
#                                            \
#                                             \
#                                              \
# rsa-sha2-512       introduced OpenSSH 7.2     \
# DSA support        REMOVED in OpenSSH 7      RELEASE-Change between SP !!!
# Roaming            Disabled / OpenSSH 7.1     /      Removed Feature
# RSA < 1024         Disabled / OpenSSH 7.x    /      Disabled per Default! 
# key-rotation ext.  introduced OpenSSH 6.8   /      Missing Features in 6.6.1
# DHKexMin           default is now 2048     /    Changed Feature (1024->2048) 
#                                           /
# INFO: SLES 12 SP1 comes with: OpenSSH_6.6.1p1, OpenSSL 1.0.1i-fips 6 Aug 2014
# INFO: SLES 12 GA  comes with: OpenSSH_6.6.1p1, OpenSSL 1.0.1i-fips 6 Aug 2014
#
# so we can assume this existing:
# Chacha20 / Ed25519 introduced OpenSSH_6.5+
# AES-GCM            introduced OpenSSH_6.1+
##############################################################################

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options change a
# default value.
# 
# In addition to that all hardening requirements from PSA process
# where *explicitly* activated even if they *may* be the default.
#

# If you want to change the port on a SELinux system, you have to tell
# SELinux about this change.
# semanage port -a -t ssh_port_t -p tcp #PORTNUMBER
#

#Port 22

######################################
# => PSA-Document 3.04 from 1.7.2021 #
######################################

####################################################################
# PSA Req 1: SSH protocol version 2 must be used (ID: 3.04-1/2.9)
####################################################################

Protocol 2				# only version 2 is secure 

#####################################################################

#currently using IPv4 ONLY ... therefore we can disable IPv6 (any) at the moment
AddressFamily inet 			# restrict it to IPv4 (any == also IPv6)


#default is to bind it to all interfaces 
#ListenAddress 0.0.0.0
#ListenAddress ::

####################################################################
# PSA Req 2: SSH moduli smaller than 2048 must not be used. (ID: 3.04-2/2.9)
#		=> Not applicable to this config file
####################################################################

#implementation example: 
#$ sed -i '/ 1023 /d' /etc/ssh/moduli
#$ sed -i '/ 1535 /d' /etc/ssh/moduli   # missing in PSA-Specs, but also < 2048 (!)
#$ sed -i '/ 2047 /d' /etc/ssh/moduli

# NOTE: RHEL 8  comes with recent enought OpenSSH-Relase (7.8p1) which uses >= 2048 for DH
# NOTE: SLES 15 comes with recent enought OpenSSH-Release.
# OpenSSH 7.2p1 has changed the default so we no longer need the KexDHMin "tuning"
# * ssh(1), sshd(8): increase the minimum modulus size supported for
#   diffie-hellman-group-exchange to 2048 bits.

# KexDHMin is DEPRECATED in OpenSSH_7.4p1
#The code [for handling DHMin] is broken since the upgrade to 7.6p1

#Note for Servers that wants to connect (via ssh-client) against running with *weaker* server on the other side: 
#For SLES 12 or SLES 12 SP1, update to openssh 6.6p1-42 or higher.
#On SLES 11 SP4, update to openssh 6.6p1-21.1 or higher.
#On SLES 11 SP3, update to openssh-openssl16.6p1-15.1 or higher.  (See Additional Info section below.)
#
# With those versions, the ssh/sftp client will accept a command-line option to lower the kex size back to 1024:
# -o KexDHMin=1024

###########################################
# >>>> HostKey for protocol version 1 ONLY
###########################################
#HostKey /etc/ssh/ssh_host_key     # UNUSED

###########################################
# HostKeys for protocol version 2
###########################################
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key

# OLD Keys (on per default)
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# NEW Keys (that will replace the old above in future)
HostKey /etc/ssh/ssh_host_key_Q4_2021_ed25519_256
HostKey /etc/ssh/ssh_host_key_Q4_2021_rsa_4096
HostKey /etc/ssh/ssh_host_key_Q4_2021_ecdsa_521
HostKey /etc/ssh/ssh_host_key_Q4_2021_dsa


#####################################################################

# Tipp: Check of SSH-Daemon settings sshd -T -C user=*
#       or       SSH-Client via ssh  -vv

######################################################################
# PSA Req 3 SSH Only approved key exchange algorithms must be used. (ID: 3.04-3/2.9)
#      check with ssh -Q kex
######################################################################
#diffie-hellman-group1-sha1
#diffie-hellman-group14-sha1
#diffie-hellman-group-exchange-sha1
#diffie-hellman-group18-sha512          APPROVED (not available in Win-Clients as of 28.10.2021)
#diffie-hellman-group16-sha512 		APPROVED (DH grp 16-sha512 is available in Royal-TS mode)
#diffie-hellman-group14-sha256 		APPROVED
#diffie-hellman-group-exchange-sha256   APPROVED
#ecdh-sha2-nistp256   			APPROVED but NSA may backdoored it
#ecdh-sha2-nistp384   			APPROVED but NSA may backdoored it
#ecdh-sha2-nistp521   			APPROVED but NSA may backdoored it
#curve25519-sha256@libssh.org    	APPROVED
#gss-gex-sha1-
#gss-group1-sha1-
#gss-group14-sha1-

#According to PSA we can therefore use this: 
#KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256 

# Choosen selection to reflect typical use-cases:
# List is sorted by strength (best on left side)
# 
#                             (modern since OpenSSH 6.5)   (SQL-Developer)    (old: since OpenSSH 4.4 for compatibility)
#                                          |                       |                            |

#KexAlgorithms             curve25519-sha256@libssh.org,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256
#                                                                                               |
#                                                                         (only option in RHEL 6/OpenSSH5.3)

#KexAlgorithms             -ecdh-sha2-nistp256,-ecdh-sha2-nistp384,-ecdh-sha2-nistp521,-ecdsa-sha2-nistp256,-ssh-rsa

# CARMEN is not using SLES 15 -> therefore we can get rid of the unsafe NIST curves:
#
#IMPORTANT: On Oracle-Linux 8.x check/modifiy value "KexAlgorithms" here instead:
#IMPORTANT: grep '\-o' /etc/crypto-policies/back-ends/opensshserver.config
KexAlgorithms             curve25519-sha256@libssh.org,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256
#                         (preffered elliptic curve)   (modern DH)                   (outdated 2048 bit ... only for compatibility)
#                                                      (not used by chacha20)
#                         (OpenSSH 6.5)                (OpenSSH 7.3)                 (OpenSSH 2.3.0)

# NOTICE how BAD / INSECURE the old RHEL8 setup was!
#KexAlgorithms diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,gss-gex-sha1-,gss-group1-sha1-,gss-group14-sha1-             # NEVER USE THIS LIST!

# The scan results on Oracle-Linux 8 looked like this:
# key exchange algorithms
#(kex) curve25519-sha256                     -- [info] available since OpenSSH 7.4, Dropbear SSH 2018.76
#(kex) curve25519-sha256@libssh.org          -- [info] available since OpenSSH 6.5, Dropbear SSH 2013.62
#(kex) ecdh-sha2-nistp256                    -- [fail] using weak elliptic curves
#(kex) ecdh-sha2-nistp256                    -- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62
#(kex) ecdh-sha2-nistp384                    -- [fail] using weak elliptic curves
#(kex) ecdh-sha2-nistp384                    -- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62
#(kex) ecdh-sha2-nistp521                    -- [fail] using weak elliptic curves
#(kex) ecdh-sha2-nistp521                    -- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62
#(kex) diffie-hellman-group-exchange-sha256 (2048-bit) -- [info] available since OpenSSH 4.4
#(kex) diffie-hellman-group14-sha256         -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73
#(kex) diffie-hellman-group16-sha512         -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73
#(kex) diffie-hellman-group18-sha512         -- [info] available since OpenSSH 7.3
#(kex) diffie-hellman-group-exchange-sha1 (2048-bit) -- [fail] removed (in server) since OpenSSH 6.7, unsafe algorithm
#(kex) diffie-hellman-group-exchange-sha1 (2048-bit) -- [warn] using weak hashing algorithm
#(kex) diffie-hellman-group-exchange-sha1 (2048-bit) -- [info] available since OpenSSH 2.3.0
#(kex) diffie-hellman-group14-sha1           -- [warn] using weak hashing algorithm
#(kex) diffie-hellman-group14-sha1           -- [info] available since OpenSSH 3.9, Dropbear SSH 0.53


######################################################################
# PSA Req 4 SSH Encryption algorithms (ciphers)  (ID: 3.04-4/2.9)
#      check with ssh -Q cipher liefert
######################################################################

#Hint: you can check on a (local) server with this command which ciphers are in use
#sshd -T 2>/dev/null | grep ciphers | perl -pe 's/,/\n/g' | sort -u

# ssh -Q cipher liefert
#3des-cbc
#blowfish-cbc
#cast128-cbc
#arcfour
#arcfour128
#arcfour256
#aes128-cbc
#aes192-cbc
#aes256-cbc
#rijndael-cbc@lysator.liu.se
#aes128-ctr                      APPROVED (available since OpenSSH 3.7)
#aes192-ctr 		 	 APPROVED
#aes256-ctr 			 APPROVED (only for compatibility with older clients)
#aes128-gcm@openssh.com          APPROVED                   but not available in putty
#aes256-gcm@openssh.com          APPROVED (2nd best choice) but not available in putty
#chacha20-poly1305@openssh.com   APPROVED (Best choice and available in PuTTY) since OpenSSH 6.5

#Important: Putty 0.73 does *not* support this approved chipers: 
#Ciphers aes256-gcm@openssh.com,aes128-gcm@openssh.com
#PuTTY can use the older aes256-ctr but in that case you need to configure an *not* approved MAC-Algorithm
#So for PuTTY-Users the best option is to only select stream-cipher chacha-poly1305 to fullfill all PSA requirement

# Choosen selection sorted by strength (best on left side) 
#
#                        (PuTTY/OpenssH since 6.5)     (openssh since 6.2)    (old: OpenSSH 3.7) 
#                                     |                          |                  |

Ciphers                   chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr
#                                                                              (e.g. for Solaris 10 / SLES 11 communication)

#IMPORTANT: On Oracle-Linux 8.x check/modifiy value "Ciphers" here instead:
# IMPORTANT: grep '\-o' /etc/crypto-policies/back-ends/opensshserver.config

# Note for very old OpenSSH5.3 (e.g. RHEL 6.x)
# aes256-ctr, aes128-ctr is the best possible option. 


# INFO: Newer Releases knew a switch called cipher-auth:
#ssh -Q cipher-auth
#aes128-gcm@openssh.com
#aes256-gcm@openssh.com
#chacha20-poly1305@openssh.com

# NOTICE: This where the /VERY BAD/ defaults from (inscure) RHEL 8 config:
# it contains AND started with the most worst (insecure) encryption ciphers possible.
# Ciphers 3des-cbc,blowfish-cbc,cast128-cbc,arcfour,arcfour128,arcfour256,aes128-cbc,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com    # NEVER USE THIS LIST!

# NOTE: Old setup in oracle-linux 8 looked like this in scanner:
# encryption algorithms (ciphers)
#(enc) aes256-gcm@openssh.com                -- [info] available since OpenSSH 6.2
#(enc) chacha20-poly1305@openssh.com         -- [info] available since OpenSSH 6.5
#(enc) chacha20-poly1305@openssh.com         -- [info] default cipher since OpenSSH 6.9.
#(enc) aes256-ctr                            -- [info] available since OpenSSH 3.7, Dropbear SSH 0.52
#(enc) aes256-cbc                            -- [fail] removed (in server) since OpenSSH 6.7, unsafe algorithm
#(enc) aes256-cbc                            -- [warn] using weak cipher mode
#(enc) aes256-cbc                            -- [info] available since OpenSSH 2.3.0, Dropbear SSH 0.47
#(enc) aes128-gcm@openssh.com                -- [info] available since OpenSSH 6.2
#(enc) aes128-ctr                            -- [info] available since OpenSSH 3.7, Dropbear SSH 0.52
#(enc) aes128-cbc                            -- [fail] removed (in server) since OpenSSH 6.7, unsafe algorithm
#(enc) aes128-cbc                            -- [warn] using weak cipher mode
#(enc) aes128-cbc                            -- [info] available since OpenSSH 2.3.0, Dropbear SSH 0.28




######################################################################
# PSA Req 5 SSH Only approved MAC algorithms must be used. (ID: 3.04-5/2.9)
#      check with ssh -Q mac
######################################################################

#Possible candidates can be found with
#ssh -Q mac

#hmac-sha1
#hmac-sha1-96
#hmac-sha2-256				APPROVED
#hmac-sha2-512				APPROVED
#hmac-md5
#hmac-md5-96
#hmac-ripemd160
#hmac-ripemd160@openssh.com
#umac-64@openssh.com
#umac-128@openssh.com
#hmac-sha1-etm@openssh.com
#hmac-sha1-96-etm@openssh.com
#hmac-sha2-256-etm@openssh.com      	APPROVED (etm==encrypt than mac) ... more secure
#hmac-sha2-512-etm@openssh.com      	APPROVED (etm==encrypt than mac) ... more secure
#hmac-md5-etm@openssh.com
##hmac-md5-96-etm@openssh.com
#hmac-ripemd160-etm@openssh.com
#umac-64-etm@openssh.com
#umac-128-etm@openssh.com

#List of approved sorted by stength (best on left side)
#MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256

# Choosen selection
#                         etm==encrypt-than-mac is
#                         safer               
#                         (openssh since 6.2)           (PuTTY 0.74)                    (PuTTY 0.73 and X2GO)
#                         (and SQL-Developer)
#                                  |                          |                               |
MACs                      hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-256

#IMPORTANT: On Oracle-Linux 8.x check/modifiy value "MACs" here instead:
#grep '\-o' /etc/crypto-policies/back-ends/opensshserver.config


# NOTE: Reason why PuTTY does not support the "newer" HMAC-SHA-512:
# https://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/hmac-sha2-512.html
# It would be simple enough to add support for HMAC-SHA-512, but this would gain practically nothing.
# HMAC-SHA-256 has an effective security of 256 bits, the same as the best of PuTTY's 
# key-exchange algorithms.
# Any attacker able to break SHA-256 can simply extract the MAC key by reversing the key exchange,
# so using HMAC-SHA-512 is pointless. 
# Adding it would come with costs in code size and complexity and in expansion of PuTTY's KEXINIT packet
# and while small, these costs outweigh the negligible benefits. 

# Note: OpenSSH 5.3 (e.g. RHEL6.x) hmac-sha2-512 + hmac-sha2-256 only! and maybe the insecure hmac-sha1
# ETM is only supported since OpenSSH 6.3+ (e.g. hmac-sha1-etm)

# NOTICE how BAD and insecure the old RHEL 8 setup was:
#MACs hmac-sha1,hmac-sha1-96,hmac-sha2-256,hmac-sha2-512,hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-ripemd160@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha1-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com      # NEVER USE THIS LIST !!!!!

# NOTE: This was the scan result before hardening:
# message authentication code algorithms
#(mac) hmac-sha2-256-etm@openssh.com         -- [info] available since OpenSSH 6.2
#(mac) hmac-sha1-etm@openssh.com             -- [warn] using weak hashing algorithm
#(mac) hmac-sha1-etm@openssh.com             -- [info] available since OpenSSH 6.2
#(mac) umac-128-etm@openssh.com              -- [info] available since OpenSSH 6.2
#(mac) hmac-sha2-512-etm@openssh.com         -- [info] available since OpenSSH 6.2
#(mac) hmac-sha2-256                         -- [warn] using encrypt-and-MAC mode
#(mac) hmac-sha2-256                         -- [info] available since OpenSSH 5.9, Dropbear SSH 2013.56
#(mac) hmac-sha1                             -- [warn] using encrypt-and-MAC mode
#(mac) hmac-sha1                             -- [warn] using weak hashing algorithm
#(mac) hmac-sha1                             -- [info] available since OpenSSH 2.1.0, Dropbear SSH 0.28
#(mac) umac-128@openssh.com                  -- [warn] using encrypt-and-MAC mode
#(mac) umac-128@openssh.com                  -- [info] available since OpenSSH 6.2
#(mac) hmac-sha2-512                         -- [warn] using encrypt-and-MAC mode
#(mac) hmac-sha2-512                         -- [info] available since OpenSSH 5.9, Dropbear SSH 2013.56






###########################################################################
# PSA Req 6: SSH Only approved Host Key Algorithms (ID: 3.04-6/2.9)
#  (a.k.a. public key signature algorithms or server authentication algorithms) must be used. 
###########################################################################
#Standard Rev. 2.8 list this ones: 
# Use the following host key algorithms:
# ecdsa-sha2-nistp521, ecdsa-sha2-nistp384, ecdsa-sha2-nistp256, ssh-ed25519

#Depending on Software names of these algorithms can deviate. As equivalent count these notations:
#ecdsa-sha2-nistp521-cert-v01@openssh.com, x509v3-ecdsa-sha2-nistp521
#ecdsa-sha2-nistp384-cert-v01@openssh.com, x509v3-ecdsa-sha2-nistp384
#ecdsa-sha2-nistp256-cert-v01@openssh.com, x509v3-ecdsa-sha2-nistp256
#ssh-ed25519-cert-v01@openssh.com
#
#Standard Rev. 2.9 list this ones: 
#ssh-ed25519
#ssh-ed25519-cert-v01@openssh.com
#sk-ssh-ed25519@openssh.com
#sk-ssh-ed25519-cert-v01@openssh.com
#ecdsa-sha2-nistp521
#ecdsa-sha2-nistp521-cert-v01@openssh.com
#ecdsa-sha2-nistp384
#ecdsa-sha2-nistp384-cert-v01@openssh.com
#ecdsa-sha2-nistp256
#ecdsa-sha2-nistp256-cert-v01@openssh.com
#sk-ecdsa-sha2-nistp256@openssh.com
#sk-ecdsa-sha2-nistp256-cert-v01@openssh.com


# can we remove the NIST-Algorithms? Bause NSA may have backdoored them... -> Answer: No because SQL-Developer still needs this (ecdsa-sha2-nistp256)
# and we removed here from (OpenSSH) default the types: ssh-rsa,ssh-dss    -> When the server provides Elliptic-Curve : no than we don't need it.
#                                                                             The client can still use RSA-Key at the moment (because of MyCard) it is still needed.

#SQL-Developer (client) is provinding this ones:
#ssh.server_host_key_algorithms == "ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-rsa,ssh-dss"

# This option specifies which HostKeyAlgorithms the SERVER will offer to the client!
# Attention: Even if the option from client and server matches ... they will *only* tried if the KeyExchange-Algorithm has enabled the for example elliptic-curves. 

# For SQL-Developer (CARMEN) added: ecdsa-sha2-nistp256 (related to host-key type found on server!)
# Choosen Selection of HostKey-Algorithms
#                         (PuTTY)     (for SQL-Developer)
#                             |                |

#HostKeyAlgorithms         ssh-ed25519,ecdsa-sha2-nistp256

# 2021/09/15
# CARMEN has no SLES 15, so we can limit host-keys to only ed25519

#IMPORTANT: On Oracle-Linux 8.x check/modifiy value "GSSAPIKexAlgorithms" here instead:
#grep '\-o' /etc/crypto-policies/back-ends/opensshserver.config
HostKeyAlgorithms         ssh-ed25519
#                         (since OpenSSH 7.2)

# NOTE: Default config on Oracle-Linux 8.x looks like this in scan:
# host-key algorithms
#(key) rsa-sha2-512 (3072-bit)               -- [info] available since OpenSSH 7.2
#(key) rsa-sha2-256 (3072-bit)               -- [info] available since OpenSSH 7.2
#(key) ssh-rsa (3072-bit)                    -- [fail] using weak hashing algorithm
#(key) ssh-rsa (3072-bit)                    -- [info] available since OpenSSH 2.5.0, Dropbear SSH 0.28
#(key) ssh-rsa (3072-bit)                    -- [info] a future deprecation notice has been issued in OpenSSH 8.2: https://www.openssh.com/txt/release-8.2
#(key) ecdsa-sha2-nistp256                   -- [fail] using weak elliptic curves
#(key) ecdsa-sha2-nistp256                   -- [warn] using weak random number generator could reveal the key
#(key) ecdsa-sha2-nistp256                   -- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62
#(key) ssh-ed25519                           -- [info] available since OpenSSH 6.5



#DSAAuthentication no    # breaks RSA auth, too
#to check if an server is using a weak ssh-rsa public key algorithm check with:
#ssh -oHostKeyAlgorithms=ssh-rsa user@host
#
#or to verify what the other side offers:
#ssh -oHostKeyAlgorithms=* server 


# This switch configures which SIGNATURE-Algorthims are accecpted
# ATTENTION: We use USER-Keys based on MyCARD and therefore we still need ssh-rsa (because of two-factor-authentication) => It is explicit agreed from security! 
#pubkeyacceptedkeytypes  ecdsa-sha2-nistp256,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,ssh-rsa #OFF: ,rsa-sha2-512,rsa-sha2-256,ssh-rsa,ssh-dss
# Choosen list            (Modern Elliptic-Curve-Keys)                 (common RSA-Keys)           (MYCARD!)
#                                    |                                         |                     |
#PubkeyAcceptedKeyTypes    ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-rsa # Elliptic-Curve from PSA + ssh-rsa because of MyCard!
#PubkeyAcceptedKeyTypes    ssh-ed25519*,ssh-rsa* # Elliptic-Curve from PSA + ssh-rsa because of MyCard!

#IMPORTANT: On Oracle-Linux 8.x check/modifiy value "PubkeyAcceptedKeyTypes" here instead:
#grep '\-o' /etc/crypto-policies/back-ends/opensshserver.config
#Strongest on left side!
PubkeyAcceptedKeyTypes    ssh-ed25519*,rsa-sha2-512*,ssh-rsa* # Elliptic-Curve from PSA + ssh-rsa because of MyCard!
#                          /                  |          \
#                         /                   |           \
#                        /              in use with      still needed (for two-factor-authentication)
#              Modern Key          agent-forwarding      aka=> for PuTTY with MyCARD 
#     with elliptic curve        from OpenSSH >=7.2      because (PuTTY 0.74) is not able to sign your RSA-Key 
#                           (possible via Jumphost)      (as used by MyCard) via SHA-2 suite
 

#->PubkeyAccecptedAlgorithms

# ssh -Q PubkeyAcceptedAlgorithms (may work to find out what is supported)
# ssh -Q key-sig                  (equivalent command)

#On newer Systems (OpenSSH >= 8.2) we later can add sk-ssh-ed25519@openssh.com ... which could be useful for Yubi-Keys
#Attention: 
#lsusb -v 2>/dev/null | grep -A2 Yubico | grep "bcdDevice" | awk '{print $2}' # ... Yubikey needs Firmware >= 5.2.3 to use this modern key!

#ssh -Q PubkeyAcceptedKeyTypes (on a SLES 15 SP3 System)
#ssh-ed25519
#ssh-ed25519-cert-v01@openssh.com
#sk-ssh-ed25519@openssh.com
#sk-ssh-ed25519-cert-v01@openssh.com
#ssh-rsa
#rsa-sha2-256
#rsa-sha2-512
#ssh-dss
#ecdsa-sha2-nistp256
#ecdsa-sha2-nistp384
#ecdsa-sha2-nistp521
#sk-ecdsa-sha2-nistp256@openssh.com
#webauthn-sk-ecdsa-sha2-nistp256@openssh.com
#ssh-rsa-cert-v01@openssh.com
#rsa-sha2-256-cert-v01@openssh.com
#rsa-sha2-512-cert-v01@openssh.com
#ssh-dss-cert-v01@openssh.com
#ecdsa-sha2-nistp256-cert-v01@openssh.com
#ecdsa-sha2-nistp384-cert-v01@openssh.com
#ecdsa-sha2-nistp521-cert-v01@openssh.com
#sk-ecdsa-sha2-nistp256-cert-v01@openssh.com

#ssh -Q sig   (from SLES 15 SP3)
#ssh-ed25519
#sk-ssh-ed25519@openssh.com
#ssh-rsa
#rsa-sha2-256
#rsa-sha2-512
#ssh-dss
#ecdsa-sha2-nistp256
#ecdsa-sha2-nistp384
#ecdsa-sha2-nistp521
#sk-ecdsa-sha2-nistp256@openssh.com
#webauthn-sk-ecdsa-sha2-nistp256@openssh.com   # SLES 15 SP3


#ssh -Q key-sig (from SLES 15 SP 3)
#ssh-ed25519
#ssh-ed25519-cert-v01@openssh.com
#sk-ssh-ed25519@openssh.com
#sk-ssh-ed25519-cert-v01@openssh.com
#ssh-rsa
#rsa-sha2-256
#rsa-sha2-512
#ssh-dss
#ecdsa-sha2-nistp256
#ecdsa-sha2-nistp384
#ecdsa-sha2-nistp521
#sk-ecdsa-sha2-nistp256@openssh.com
#webauthn-sk-ecdsa-sha2-nistp256@openssh.com
#ssh-rsa-cert-v01@openssh.com
#rsa-sha2-256-cert-v01@openssh.com
#rsa-sha2-512-cert-v01@openssh.com
#ssh-dss-cert-v01@openssh.com
#ecdsa-sha2-nistp256-cert-v01@openssh.com
#ecdsa-sha2-nistp384-cert-v01@openssh.com
#ecdsa-sha2-nistp521-cert-v01@openssh.com
#sk-ecdsa-sha2-nistp256-cert-v01@openssh.com


#############################################################
# PSA Req 7 SSH logging must be enabled.  (ID: 3.04-7/2.9)
# (Default-Level INFO or for debugging VERBOSE) 
#############################################################

#NOTE: RHEL8 uses AUTHPRIV in existing setups.
SyslogFacility AUTHPRIV 		    #(SLES15: default AUTH)
LogLevel INFO 
#LogLevel DEBUG2 

#############################################################
# PSA Req 8:SSH LoginGraceTime must be set to one minute (1m) or less. 
#           values are specified in seconds (or minutes with appending m)
#           0 would mean no limit
# ID: 3.04-8/2.9
#############################################################

LoginGraceTime 30 

#############################################################
# PSA Req 9:SSH MaxAuthTries ... set to 5 (or less)  
# ID: 3.04-9/2.9
#############################################################

MaxAuthTries 3

#############################################################
# PSA Req 10: SSH root login must be disabled.
#
# All users must have unique and personal user accounts. 
# Constantly working as root is not permitted.
#
# It must be guaranteed to ... enroll SSH-Keys (for root) 
# ... with a configuration management system.
#
# Login with password over SSH is not allowed).
# (ID: 3.04-10/2.9)
#############################################################


#If this option is set to “prohibit-password” or “without-password”,
#=> password and keyboard-interactive authentication are disabled for root.

PermitRootLogin no 

#Test this setting with:
#sshd -T | grep -i PermitRootLogin
#it should show: no

###########################################################
# PSA Req 11: SSH strict mode must be enabled. 
# (ID: 3.04-11/2.9)
###########################################################

StrictModes yes

##############################################################
# PSA Req 12: SSH user authentication must be done with public keys
# (ID: 3.04-12/2.9)                     ^^^^
#                          (example in PSA is needed but not enough!)
# Security docs mentiones also that private keys must be protected.
# That is the reason that we need the MyCard to ensure /that/.
##############################################################

#Note: RHEL 6.x only know this switch
PubkeyAuthentication yes # default is yes == it *allows* to use public-keys (not enforces!)

# Note: KbdInteractiveDevices Keyword (undocumented sinde OpenSSH 3.9)
#       is now officially supported.

#On modern systems you also have AuthenticationMethods as additional option.
#You may need to adjust PAM (/etc/pam.d/sshd to disable passwords!) 
#Just to disable Password-Authentication is not sufficient
#AuthenticationMethods publickey,keyboard-interactive:pam


#15.09.2021 works also with WinSCP! Entries are separated by BLANK!
#               On newer OpenSSH-Releases you can also combine methods e.g. publickey,password
AuthenticationMethods  gssapi-with-mic publickey
#                      (Kerberos)      (SSH-Key)

#SLES 12 The default is “.ssh/authorized_keys .ssh/authorized_keys2”.
#and in config file we had:
#AuthorizedKeysFile	.ssh/authorized_keys

# Remark remove comment for SLES 15 ! The default has changed in SLES 15!
AuthorizedKeysFile      %h/.ssh/authorized_keys

#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files

###########################################################
# PSA Req 13 : SSH password authentication must be disabled. 
# (ID: 3.04-13/2.8)
###########################################################

PasswordAuthentication no                 

###########################################################
# PSA Req 14 SSH IgnoreRhosts must be enabled. 
# (ID: 3.04-14/2.9)
###########################################################

IgnoreRhosts yes

###########################################################
# PSA Req 15 SSH HostbasedAuthentication must be disabled. 
# (ID: 3.04-15/2.9)
###########################################################

HostbasedAuthentication no

# This would specify which SIGNATURE-Algorithms could be used in case we would have enabled "HostbasedAuthentication" 
# which we DONT wont to have activated.
hostbasedacceptedkeytypes ssh-ed25519  # <- NOT used ! But we need to place at least one value there. 
# because the name "hostbasedacceptedkeytypes" is misleading
# it was renamed in later SSH-Releases to the more clear
# HostbasedAcceptedAltorithms (the signature Algorithms secure rsa-sha2-512 vs. insecure rsa-sha1 is meant in this case.

#Unable to negotiate with 10.1.190.16 port 22: no matching host key type found. Their offer: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519
#> ssh -oHostKeyAlgorithms=* server 

###########################################################
# PSA Req 16 The usage of the SSH service must be restricted to dedicated groups or users 
# (ID: 3.04-16/2.9)
###########################################################

# The allow/deny directives are processed in the following
# order: DenyUsers, AllowUsers, DenyGroups, and finally AllowGroups.

# Note: Access to servers is granted / denied via 
# /etc/security/access.conf so this setting does *nothing* harmful
# but it prevents us from getting a false positive warning from security
# scanner

# Note: sshd_config seperates values with blank not comma!
AllowUsers ssh-user *
AllowUsers {{ ssh_users }}
AllowGroups ssh-group *

# Note: sshd_config seperates values with blank not comma!
# We use a complete list here because of enumeration attack (CVE-2018-15473)
# This problem will be fixed in OpenSSH 7.8/7.8p1: OpenSSH (https://www.openssh.com/releasenotes.html)
# additions 2021/09/15 according to Qualys-Scan

# Prevent access to root via internal LANs (in general)
DenyUsers root@*.t-internal.com root@*.t-systems.com root@*.telekom.de root@*.t-systems.de root@*.t-mobile.cz root@*.telekom.com root@*.t-systems.sk root@*.t-systems.ru at bin daemon adm halt mail operator rpcuser shutdown sync ftp games lp man news nobody uucp nscd openslp polkitd rpc scard statd openvswitch pulse dina gdm gopher admin backup deamon guest ident identd lrhaz69j1j m_3ysr33u mailnull man msql named ne43_whie4sp4no news se_phonbjh telnetd USERID www x1g8ezf7z1s7j0 xfs ytvr7s_klgcywlj zyfwp

DenyGroups nobody nogroup

# Note: We can also realize Hostbased rules:
# AllowUsers *@tmv1000.devlab.de.tmo

# or Domain-based rules
# AllowUsers *@*.devlab.de.tmo 

##############################################################################
# PSA Req 17 The SSH Idle Timeout Interval must be configured to an adequate time.
#	with consideration of operations requirements idle timeout should be kept minimal
# (ID: 3.04-17/2.9)
##############################################################################

# Kill inactive sessions after 10x60s == 10 minutes.
# NOTE: this switches are NOT an idle-timeout.
# They just say if the other side is GONE that we don't need to allocate
# the session-resources.

ClientAliveInterval 60
ClientAliveCountMax 10

#############################################################
# PSA Req 18 SSH tunnel devices must be disabled
#            SSH can be used to tunnel services. For management service of Linux servers this is typically
#            not used and can be disabled.
#	     (ID: 3.04-18/2.9)
#############################################################

permittunnel no

###########################################################

# We currently are NOT using Challange-Response (e.g. Google-Authenticator) 
ChallengeResponseAuthentication no

#############################################################
# Native (old) Kerberos is not used -> GSSAPI has replaced it
#############################################################
KerberosAuthentication no
KerberosOrLocalPasswd no 
KerberosTicketCleanup yes

##from (old RHEL8 outcommented config)
##KerberosGetAFSToken no 
##KerberosUseKuserok yes                                       



#############################################################
# Activate GSSAPI-Authentication (*generic* version of KERBEROS) 
# Attention: This switches must be *also* activated in (/etc/ssh/ssh_config) 
#############################################################

# Activation of modern Kerberos-Tickets (aka GSSAPI)
# Specifies whether user authentication based on GSSAPI is allowed.  The default is “no”. But we need yes within our LAB. 
GSSAPIAuthentication yes
 
# Specifies whether to automatically destroy the user's credentials cache on logout.  The default is “yes”.
GSSAPICleanupCredentials yes

# NOTE: The third important value (in /etc/ssh/sshd_config) to get this working is:
# AuthenticationMethods  gssapi-with-mic publickey
# This is specified later in this config file.
# Note the list is ordered ... so place the gssapi-with-mic first!

##############################
# UNCHANGED GSS-Values follow
##############################

# -------------------------
# GSSAPIStrictAcceptorCheck  
# -------------------------
# Determines whether to be strict about the identity of the GSSAPI acceptor a client authenticates against.  If set to “yes” then the client must authenticate against the
# host service on the current hostname.  If set to “no” then the client may authenticate against any service key stored in the machine's default store.  This facility is
# provided to assist with operation on multi homed machines.  The default is “yes”. (UNCHANGED!)

# SLES 12 use no (?) different to documentation!
#GSSAPIStrictAcceptorCheck no 

# RHEL 8 (before had the *outcommented*) Option:
##GSSAPIStrictAcceptorCheck yes                                  

# RHEL 8 (before had the *outcommend* Option:
##GSSAPIEnablek5users no                                       

# -------------------------
# GSSAPIStoreCredentialsOnRekey
# -------------------------
# Controls whether the user's GSSAPI credentials should be updated following a successful connection rekeying. This option can be used to accepted renewed or updated creden-
# tials from a compatible client. The default is “no”. (UNCHANGED!)

#GSSAPIStoreCredentialsOnRekey no

# -------------------------
# GSSAPIKeyExchange no
# -------------------------
# Specifies whether key exchange based on GSSAPI is allowed. GSSAPI key exchange doesn't rely on ssh keys to verify host identity.  The default is “no”. 
# Note that this option applies to protocol version 2 only.
#
# Switch was disabled in SLES 12 (standard) config.
#
# This switch would add  gss-gex-sha1-
# and                    gss-group1-sha1-
# and                    gss-group14-sha1-
# to the possible kex_algorithms in SSH-Handshake
# which we do NOT really want because of weak-security!
# So let the GSSAPIKeyExchange on no and let SSH-Perform the 
# Hostkey verification
#############################################################

#GSSAPIKeyExchange no

# -------------------
# GSSAPIKexAlgorithms (requires recent OpenSSH / as in SLES 15 SP 3)
# -------------------
#             The list of key exchange algorithms that are accepted by GSSAPI
#             key exchange. Possible values are
#
#                gss-gex-sha1-,
#                gss-group1-sha1-,
#                gss-group14-sha1-,
#                gss-group14-sha256-,
#                gss-group16-sha512-,
#                gss-nistp256-sha256-,
#                gss-curve25519-sha256-
#
#             The default is “gss-gex-sha1-,gss-group14-sha1-”.  This option
#             only applies to protocol version 2 connections using GSSAPI.

# Available in SLES 15 SP3 / openssh-8.4p1-1.30 (but not SP0)
# default settings are not good:
# GSSAPIKexAlgorithms gss-gex-sha1-,gss-group14-sha1-

# Used in (old) RHEL 8 config was:
# GSSAPIKexAlgorithms gss-gex-sha1-,gss-group1-sha1-,gss-group1

# TODO: XXX Review later if we can use something like this:
# This would be a better setting (if available!)
# GSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-,gss-group14-sha256-

#Settings from ORACLE-Linux 8.2
gssapienablek5users no
#gssapikexalgorithms gss-gex-sha1-,gss-group14-sha1-

#IMPORTANT: On Oracle-Linux 8.x check/modifiy value "GSSAPIKexAlgorithms" here instead:
#grep '\-o' /etc/crypto-policies/back-ends/opensshserver.config

#-----------------------------------------------------------------------------------
# Set this to 'yes' to enable support for the deprecated 'gssapi' authentication
# mechanism to OpenSSH 3.8p1. The newer 'gssapi-with-mic' mechanism is included
# in this release. The use of 'gssapi' is deprecated due to the presence of 
# potential man-in-the-middle attacks, which 'gssapi-with-mic' is not susceptible to.
#GSSAPIEnableMITMAttack no
#-----------------------------------------------------------------------------------

############################# END of KERBEROS / GSS-API SECTION ##################### 

# Set this to 'yes' to enable PAM authentication, account processing, 
# and session processing. If this is enabled, PAM authentication will 
# be allowed through the ChallengeResponseAuthentication mechanism. 
# Depending on your PAM configuration, this may bypass the setting of 
# PasswordAuthentication yes
# "PermitRootLogin without-password". If you just want the PAM account and 
# session checks to run without PAM authentication, then enable this but set 
# ChallengeResponseAuthentication=no

# WARNING: 'UsePAM no' is not supported in Red Hat Enterprise Linux and may cause several
# problems.

UsePAM yes

# Futher notes related to this "UsePAM yes" switch:
# Because PAM challenge-response authentication usually serves an
# equivalent role to password authentication, you should
# disable either PasswordAuthentication or ChallengeResponseAuthentication.

# If UsePAM is enabled, you will not be able to run sshd(8) as a non-root user.  The default is “no”.

##########################################################
# Disable ANY Forwarding in one step
# but we leave the other settings there
# just in case some Security-Scanner like TasteOS wants
# to see them explicitly...
##########################################################

#Switch is not possible on SLES12! 
#appeared in OpenSSH 7.4 / comes with SLES 15...
DisableForwarding no

##########################################################
# PSA Req 19 : SSH TCP port forwarding must be disabled
#              (ID: 3.04-19/2.9)
##########################################################

AllowTcpForwarding yes

# Note: disabling StreamLocal forwarding does *not* improve security
#       as long as a shell is not disabled, too!
AllowStreamLocalForwarding no

# Note:VS-Code Server may need switch (AllowStreamLocalForwarding) set to yes

##########################################################
# PSA Req 20 : SSH agent forwarding must be disabled
#              on *all* but (admin) JUMP-Servers
#              (ID: 3.04-20/2.9)
##########################################################

AllowAgentForwarding yes

#HINT: Use the safer ProxyJump instead if you need it...

###########################################################################
# PSA Req 21 : SSH gateway ports must be disabled.
#      SSH Gateway ports specifies whether remote hosts can connect to ports forwarded for the client. 
#      For management service of Linux servers this is typically not used and can be disabled.
#      (ID: 3.04-21/2.9)
###########################################################################

GatewayPorts no

##########################################################
# Req 22 SSH X11 forwarding must be disabled
##########################################################

X11Forwarding no 

#X11DisplayOffset 10 
#X11UseLocalhost yes

#2021/10/06	rootmgu: RHEL 8.3 had this setting active:
#x11maxdisplays 1000


###########################################################################
# PSA Req 23 : SSH PermitUserEnvironment must be disabled.
#      (ID: 3.04-23/2.9)
###########################################################################

PermitUserEnvironment no

##############################################################
# PermitUserRC
#             Specifies whether any ~/.ssh/rc file is executed. 
#             The default is “yes”.
##############################################################

PermitUserRC no

###########################################################################
# PSA Req 24 :SSH PermitEmptyPasswords must be disabled.
#      (ID: 3.04-24/2.9)
###########################################################################

PermitEmptyPasswords no

###########################################################################
# PSA Req 25 : SSH If SFTP is activated, internal server of OpenSSH must be used.
###########################################################################

# 2021/09/09	rootmgu: Changed to internal-sftp
# aus dem sftp-Solution document from security....
#Subsystem       sftp    internal-sftp -f AUTH -l VERBOSE  # SLES 15!

# 2021/10/06 	rootmgu: Adjusted for RHEL 8
Subsystem       sftp    internal-sftp -f AUTHPRIV -l VERBOSE 

# INFO: Security-Scanner checks if it finds *internal* as keyword here:
# sshd -T | grep -i sftp
#subsystem sftp internal-sftp -f AUTH -l VERBOSE

# NOTICE:
# subsystem sftp /usr/libexec/openssh/sftp-server
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#                RHEL 8.3 PATH !!! differs from SLES

##########################################################################
# Left over.... and not described further in PSA documents

#PrintMotd yes
#PrintLastLog yes
#TCPKeepAlive yes
#UseLogin no

# 2021/09/06 No compression should be faster/safer thefore changed to "no"
# Compression yes==delayed ... means compression *after* authentication)
Compression no            

# Default has changed in newer OpenSSH-Releases to no.
# Security has no real benefit by setting it to yes
# but setting to yes can prevent us from using key-rotation
# so the switch has been changed to no (indended!) 
UseDNS no 

#PidFile /var/run/sshd.pid # (default at least on SLES 12 SP5 is /run/sshd.pid)

#MaxStartups 10:30:100     # (default at least on SLES12SP5)

# allow a max. number of multiplexed sessions:
#MaxSessions 2

# 2021/09/06
# no default banner path
Banner none

# 2021/09/10 outcommented (again)
#VersionAddendum none 

# OpenSSH before 6.8 does not properly support wildcards!
# CVE-2014-2532

# This enables accepting locale enviroment variables LC_* LANG, see sshd_config(5).
#AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES 
#AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT 
#AcceptEnv LC_IDENTIFICATION LC_ALL

# Make config more readable
# 2021/10/06 adjusted for RHEL 8 (added: XMODIFIERS and LANGUAGE)
AcceptEnv LANG LC_* XMODIFIERS LANGUAGE

# RHEL8 had this setting active:
#showpatchlevel no

# RHEL8 had this setting active:
#exposeauthenticationmethods never

##################
# ORACLE-Linux 8.2
##################

# Hint can be used for filtering user-ssh keys (e.g. keysize+alg)
# or can be used to query keys from LDAP or Databases
#authorizedkeyscommand none
#authorizedkeyscommanduser none
#authorizedprincipalscommand none
#authorizedprincipalscommanduser none
#authorizedprincipalsfile none

# Feature of CA for SSH-Keys
casignaturealgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256
trustedusercakeys none

# Gives infos about key to PAM (from my understanding)
exposeauthinfo no

#forcecommand none
#hostkeyagent none
#permitlisten any
#domain none
#streamlocalbindunlink no
#x11maxdisplays 1000
##################################
# End of ORACLE-Linux 8.2 Section
##################################

###########################################################################
# RekeyLimit 
# 	Specifies the maximum amount of data that may be transmitted
#	before the session key is renegotiated, 
###########################################################################

# Ciphers and keying for protocol 2 
#RekeyLimit default none

# Hint: This command can be used to Filter SSH-Key Formats ... or used to query-keys from LDAP for example.
#
# AuthorizedKeysCommand
#             Specifies a program to be used to look up the user's public keys.  The program must be owned by root, not writable by group or others and specified by an absolute path.
#             Arguments to AuthorizedKeysCommand accept the tokens described in the TOKENS section.  If no arguments are specified then the username of the target user is used.
#
#             The program should produce on standard output zero or more lines of authorized_keys output (see AUTHORIZED_KEYS in sshd(8)).  If a key supplied by AuthorizedKeysCommand
#             does not successfully authenticate and authorize the user then public key authentication continues using the usual AuthorizedKeysFile files.  By default, no
#             AuthorizedKeysCommand is run.
#
#     AuthorizedKeysCommandUser
#             Specifies the user under whose account the AuthorizedKeysCommand is run.  It is recommended to use a dedicated user that has no other role on the host than running autho‐
#             rized keys commands.  If AuthorizedKeysCommand is specified but AuthorizedKeysCommandUser is not, then sshd(8) will refuse to start.

# In newer OpenSSH-Releases we have a casignature feature.
# Because in future releases SHA-1 will be removed I do it here an yet.
# and I also removed the broken NIST stuff to prevent it from be used
casignaturealgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256

################################################################################
#  Use this to apply machine or user specific rules
#
#  Match   Introduces a conditional block.  If all of the criteria on the Match line are
#             satisfied, the keywords on the following lines override those set in the
#             global section of the config file, until either another Match line or the end
#             of the file.  If a keyword appears in multiple Match blocks that are satis-
#             fied, only the first instance of the keyword is applied.
#
#
# Available keywords are AcceptEnv, AllowAgentForwarding, AllowGroups,
#             AllowStreamLocalForwarding, AllowTcpForwarding, AllowUsers,
#             AuthenticationMethods, AuthorizedKeysCommand, AuthorizedKeysCommandUser,
#             AuthorizedKeysFile, AuthorizedPrincipalsCommand,
#             AuthorizedPrincipalsCommandUser, AuthorizedPrincipalsFile, Banner,
#             ChrootDirectory, DenyGroups, DenyUsers, ForceCommand, GatewayPorts,
#             GSSAPIAuthentication, HostbasedAcceptedKeyTypes, HostbasedAuthentication,
#             HostbasedUsesNameFromPacketOnly, IPQoS, KbdInteractiveAuthentication,
#             KerberosAuthentication, MaxAuthTries, MaxSessions, PasswordAuthentication,
#             PermitEmptyPasswords, PermitOpen, PermitRootLogin, PermitTTY, PermitTunnel,
#             PermitUserRC, PubkeyAcceptedKeyTypes, PubkeyAuthentication, RekeyLimit,
#             RevokedKeys, RhostsRSAAuthentication, RSAAuthentication, StreamLocalBindMask,
#             StreamLocalBindUnlink, TrustedUserCAKeys, X11DisplayOffset, X11Forwarding and
#             X11UseLocalHost.

#######################################################
# Example(s) of overriding settings on a per-user basis
#######################################################
# Match User anoncvs
# 	X11Forwarding no
# 	AllowTcpForwarding no
# 	PermitTTY no
# 	ForceCommand cvs server


#######################################################
# Document from security how to setup a *secure* sftp can be found here:
# https://yam.telekom.de/docs/DOC-562633
#######################################################

# Note: Since OpenSSH 4.8p1/4.9p1 we can limit users to their Home Dirs without further hacks.

# 2021/10/08	adjusted for RHEL8 (AUTH -> AUTHPRIV)
Match Group sftponly 
	ChrootDirectory /sftpchroot/home/%u 
	ForceCommand   internal-sftp -f AUTHPRIV -l INFO
        AllowTcpForwarding no
        X11Forwarding no
        PermitTunnel no


#Watch out for error messages like this if sftp is not working correctly
#sshd[3042]: fatal: chroot into directory without nodev and either noexec or nosuid
#
#Also note:
#All components of the pathname must be root-owned directories
# that are not writable by any other user or group. 
#After the chroot, sshd(8) changes the working directory to the user's 
#home directory.
#Permissions: 755 (owned by root!)
#drwxr-xr-x 2 root root 15 Sep 10 10:52 user 


#Match Group *,!root
#ForceCommand="/svc/git/home/git/bin/gl-auth-command-ssh_wrapper.sh"

###########################################
# Special-Rules
# To be placed at the bottom of sshd_config
###########################################

# Allows access with *public* keys only - no passwords
# so passwords can't be brute-forced!

# This is safe as long as the OpenSSH-Release allows us
# to specify prohibit-password here (7.2 is ok / 6.6 is to old for this)
Match User root 
	AllowUsers root@10.1.200.31 root@10.1.226.28 root@10.1.200.26 root@10.1.234.149 root@10.1.207.133 root@10.1.190.30 root@10.1.235.137 root@10.1.235.228 root@10.1.226.2 root@10.1.235.219 root@10.1.234.234 root@10.1.200.13 root@10.1.200.131 root@10.1.200.72 root@192.168.100.17 root@192.168.100.18 root@10.1.234.240 root@10.1.234.208

	# Note root in general from Office-LAN is blocked before!	
	PermitRootLogin prohibit-password 
#Note: on older openssh-releaeses "prohibit-password" is unknown.
#in that case the only possible option is setting it to  "yes" (not recommended!) 
#
#sshd -T -C user=root,host=*,addr=* | grep -i PermitRootLogin

#Alternative way ... based on destination IPs of Server

#Match Address *
	#PermitRootLogin prohibit-password

#sshd -T -C user=root,host=tmv2695.devlab.de.tmo,addr=10.1.200.13 | grep -i permit
#should show: prohibit-password



############################################
# Admins
# each admin can forward from his own server
# ... because he *OWNS* it exclusive
############################################

#Commando for testing Match-Rules:
#sshd -T -C user=root,host=tmv2695.devlab.de.tmo,addr=10.1.200.13 |grep -i perm

#Attention: The match address specifies the *DESTINATION* host
#           and not the source host!

#Match Address <IP>
#       PermitRootLogin no
#
#       Attention: Agent Forwarding cannot specified here
#                  at least if your agent is located on a windows box.
#                  In this case the chain is interrupted *before*
#                  the next server would allow agent-forwarding

######################################################
# Exception-List for user which needs Agent-Forwarding
# (e.g. for using two-factor-authentication via MyCard
# on controlled dedicated JUMP-Servers)
######################################################

# List of admin-users must be seperated with comma (NOT Blank!)

Match User guetingm,volmer,krassman,kunzec,fjargon,mgazdik,madurani,mahobusc,mgujdan,vkristia,aaudens,lladonov,aksic,mbobko,mtopolca
        AllowAgentForwarding yes
        X11Forwarding yes

# List of database-admin must be seperated with comma (NOT Blank!)

Match User mjoshi1,stitus,ans,nidgupta,mearora,bhagniho,shrpatil,shibhatt,rkilaru,glagad,vikthaku
        AllowAgentForwarding yes

# DBAs need this:
Match User oracle 
        AllowAgentForwarding yes

#################################################
# Graphical-Desktop EXCEPTION (X2GO-Users)
# Accounts listed here are allowed to use X11
# (which is OFF in general) 
#################################################

################################################################
# Attention: X2GO is *not* working just with X11Forwarding
################################################################
#                 it also requires           AllowTcpForwarding
#
#                 and which is also worse:
#                 an interactive password prompt
#
#                 to harden this as much as possible
#                 the rights are only granted on a per user-basis.
#                 and the password entry is only valid in combination with a valid SSH-public-key
#
# sshd -T -C user=name,host=*,addr=*| grep auth
# Expected output: authenticationmethods gssapi-with-mic publickey publickey,keyboard-interactive:pam
#
# compared to the default config with:
# sshd -T | grep auth
# authenticationmethods gssapi-with-mic publickey
################################################################

# Exception for customers that (may) need X11Forwarding (e.g. to install a commercial sw-product).
# Note: X2Go-Installations are currently not expected to be active on SLES 15 servers therefore
#       this example is outcommented by intention! 

# Some servers with ORACLE-Linux 8.x may need to have an exception here..
# IMPORTANT: Separate the users in this list with a comma (NO BLANK1)
Match User _x2go_,oracle
        AuthenticationMethods  gssapi-with-mic publickey publickey,keyboard-interactive:pam
        #                      (Kerberos)      (SSH-Key) (SSH-Key+PW needed for X2GO)
        disableforwarding no
        X11Forwarding yes
        AllowTcpForwarding yes
#
# NOTE: Agent-Forwarding is not necessary in this section.
#       reason: if you want ot use an agent (to connect to X2GO)
#       your agent is running on your windows-box and so there
#       is no need (for the X2GO server) to forward it to the
#       next server.


##############################################################
# (Simpler) Rule for Users that *just* needs X11 (but no X2GO)
#           -> Xming instead of X2Go as example
##############################################################

# IMPORTANT: Separate the users in this list with a comma (NO BLANK1)
Match User _x11_
        disableforwarding no
        X11Forwarding yes


#Match User xyz
#	# Ensure that nobody is using ssh-keys without a password!	
#	AuthenticationMethods "publickey,password"
#
#	# Enforce two *different* SSH-Keys ;-)
#	AuthenticationMethods "publickey,publickey"
#
#	AuthenticationMethods "publickey,keyboard-interactive:pam"
		

Match User 2FA
	# User need a public-key    AND   he must provide a valid password! 
	AuthenticationMethods publickey,password

####################################################################
# Attention: Some keywords are *NOT* allowed with a match-block
#####################################################################

Match User OTP
	# Google-Authenticator
	AuthenticationMethods publickey,keyboard-interactive
#	needs something like pam_google_authenticator.so in PAM-Konfig


# sshd -T -C user=abc,host=server.devlab.de.tmo,addr=10.1.200.88
# Testing-Notes:
# sshd -T -C user=abc,host=server.devlab.de.tmo,addr=10.1.200.88,laddr=<IP>,lport=22222

# INFO ... Starting with OpenSSH 7.6 you can set alternate loglevels in
#          a match block




# defaults for all yubikey users (pub-key + yubikey)
#	ChallengeResponseAuthentication yes
#Match _yubikeyuser_ 
#        AuthenticationMethods publickey,keyboard-interactive
#        PasswordAuthentication no

	
